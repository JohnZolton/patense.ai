// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model OAReport {
  id       String       @id @default(uuid()) @unique
  date     DateTime  @default(now())
  stripeTxId  String? @unique
  completed Boolean @default(false)
  orderTime DateTime @default(now())
  userID   String
  title String
  specKey String
  features FeatureItem[]
  files Reference[]
  @@index([userID, stripeTxId])
}

model FeatureItem {
  id       Int      @id @default(autoincrement())
  feature  String @db.MediumText()
  analysis String @db.LongText()
  source   String @db.MediumText()
  reportID String  // Foreign key relationship with the Analysis model
  oaReport OAReport @relation(fields: [reportID], references: [id])
  @@index([reportID])
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model UploadFile {
  id        String      @id @default(cuid())
  title     String
  userId  String
  uploadStatus UploadStatus @default(PENDING)
  url String
  key String
  @@index([userId, key])
}
model Reference {
  id        String      @id @default(cuid())
  reportId  String
  title String
  userId  String
  key String
  report    OAReport @relation(fields: [reportId], references: [id])
  @@index([reportId, userId])
}